<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用伪手写体搞定毛概笔记</title>
    <url>/2020/06/06/%E4%BD%BF%E7%94%A8%E4%BC%AA%E6%89%8B%E5%86%99%E4%BD%93%E6%90%9E%E5%AE%9A%E6%AF%9B%E6%A6%82%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>毛概课在接连上了五个月网课之后,终于到了期末.</p>
<p>对此,毛概老师给全班做出指示: “收  给我收笔记!” </p>
<a id="more"></a>

<h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><p>众所周知, 大学的思政课笔记是最无聊虽没意义的形式主义了.</p>
<p>尤其是他还要求是手写的情况下.</p>
<p>尤其是手写的笔记还要拍照提交的情况下.</p>
<p><del>不会吧不会吧, 不会真的有人还在用纸笔记笔记吧? 🐶<del/></p>
<p>受亲爱的<a href="https://moefactory.com/" target="_blank" rel="noopener">小梦同学</a>提点, 我们来研究一下怎么<strong>仿造手写体</strong>打印材料.</p>
<p><strong>重要提醒</strong></p>
<p>由于打印机本身的限制, 实物还是肉眼可见地分辨出伪手写稿. 本学期因为以前的影响只要求把笔记拍照上传检查, 比较好蒙混过关🤔</p>
<p>如果是线下查收, 还是换个摸鱼方法吧….</p>
<p>本方法无需编程基础. </p>
<h2 id="开冲"><a href="#开冲" class="headerlink" title="开冲"></a>开冲</h2><h3 id="Step1-生成自己的手写字体"><a href="#Step1-生成自己的手写字体" class="headerlink" title="Step1. 生成自己的手写字体"></a>Step1. 生成自己的手写字体</h3><p>北京大学计算机科学技术研究所有一个项目<a href="http://59.108.48.27/flexifont-chn/login/" target="_blank" rel="noopener">Flexifont字库</a>, 可以实现自己的字库. 点开注册登录, 根据提示下载模板, 打印书写, 拍照生成就可以了. </p>
<p><img src="https://my-pic-bed-1302358960.cos.ap-nanjing.myqcloud.com/Blog/202006/img/%5DI%7DRW22GJ%7B%401NL7JYIE%2483C.png" alt=""></p>
<p>如图, 下载不同字数的模板, 打印出来填好,  上传生成即可.</p>
<p>不过我没整这一步, 直接在字库分享里面下了别人的, 谢谢张建同学.</p>
<p>下载好.ttf文件后导入系统文件夹(C:\Windows\Fonts)即可.</p>
<h3 id="Step2-设置-Word-宏命令"><a href="#Step2-设置-Word-宏命令" class="headerlink" title="Step2. 设置 Word 宏命令"></a>Step2. 设置 Word 宏命令</h3><p>参考了 <a href="https://www.zhihu.com/question/20308770" target="_blank" rel="noopener">这个问题 </a>下的回答</p>
<p>在Word中依次点击 “文件 -&gt; 选项 -&gt; 信任中心 -&gt; 信任中心设置 -&gt; 宏设置” 在右侧选中 “启用所有宏”.</p>
<p><img src="https://my-pic-bed-1302358960.cos.ap-nanjing.myqcloud.com/Blog/202006/img/hongshezhi%20.png" alt="宏设置"></p>
<p><strong>回到主界面, 视图 - 宏 - 查看宏</strong></p>
<p><img src="https://my-pic-bed-1302358960.cos.ap-nanjing.myqcloud.com/Blog/202006/img/2020%E5%B9%B46%E6%9C%886%E6%97%A53.png" alt="宏代码编写1"></p>
<p>输入方案名,新建, 并在弹出的窗口中插入以下代码</p>
<figure class="highlight vb"><table><tr><td class="code"><pre><span class="line"><span class="comment">' 注意是插入 不是直接把原来的替换掉哦</span></span><br><span class="line">    <span class="keyword">Dim</span> R_Character <span class="keyword">As</span> Range</span><br><span class="line"></span><br><span class="line">    <span class="keyword">Dim</span> FontSize(<span class="number">5</span>)</span><br><span class="line">	<span class="comment">' 字体大小在5个值之间进行波动，可以改写 </span></span><br><span class="line">	<span class="comment">' 个人建议 如果纸张线条间距为8mm, 字号设置为16左右比较合适</span></span><br><span class="line">    FontSize(<span class="number">1</span>) = <span class="string">"15.5"</span></span><br><span class="line">    FontSize(<span class="number">2</span>) = <span class="string">"15"</span></span><br><span class="line">    FontSize(<span class="number">3</span>) = <span class="string">"16"</span></span><br><span class="line">    FontSize(<span class="number">4</span>) = <span class="string">"17"</span></span><br><span class="line">    FontSize(<span class="number">5</span>) = <span class="string">"17.5"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Dim</span> FontName(<span class="number">3</span>)</span><br><span class="line">    <span class="comment">'字体名称在三种字体之间进行波动，可改写，但需要保证系统拥有下列字体</span></span><br><span class="line">	FontName(<span class="number">1</span>) = <span class="string">"宋体"</span></span><br><span class="line">	FontName(<span class="number">2</span>) = <span class="string">"微软雅黑"</span></span><br><span class="line">	FontName(<span class="number">3</span>) = <span class="string">"黑体"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Dim</span> ParagraphSpace(<span class="number">5</span>)</span><br><span class="line">	<span class="comment">'行间距 在一定以下值中均等分布，可改写 </span></span><br><span class="line">	<span class="comment">' 个人建议 如果纸张线条间距为8mm, 字号设置为23左右比较合适, 并且不建议波动过大</span></span><br><span class="line">    ParagraphSpace(<span class="number">1</span>) = <span class="string">"22"</span></span><br><span class="line">    ParagraphSpace(<span class="number">2</span>) = <span class="string">"22.5"</span></span><br><span class="line">    ParagraphSpace(<span class="number">3</span>) = <span class="string">"23"</span></span><br><span class="line">    ParagraphSpace(<span class="number">4</span>) = <span class="string">"23.5"</span></span><br><span class="line">    ParagraphSpace(<span class="number">5</span>) = <span class="string">"24"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">'下面是功能代码 不想要什么直接删除就行</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">For</span> <span class="keyword">Each</span> R_Character <span class="keyword">In</span> ActiveDocument.Characters</span><br><span class="line"></span><br><span class="line">        VBA.Randomize</span><br><span class="line"></span><br><span class="line">        R_Character.Font.Name = FontName(Int(VBA.Rnd * <span class="number">3</span>) + <span class="number">1</span>)</span><br><span class="line">	<span class="comment">'上面一行是随机变换字体,不想要可删除</span></span><br><span class="line">        R_Character.Font.Size = FontSize(Int(VBA.Rnd * <span class="number">5</span>) + <span class="number">1</span>)</span><br><span class="line">	<span class="comment">'上面一行是随机变换字体大小,不想要可删除</span></span><br><span class="line">        R_Character.Font.Position = Int(VBA.Rnd * <span class="number">3</span>) + <span class="number">1</span></span><br><span class="line">	<span class="comment">'上面一行对每个字随机上下微调,不想要可删除</span></span><br><span class="line">        R_Character.Font.Spacing = <span class="number">0</span></span><br><span class="line">	<span class="comment">'上面一行不要修改</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Next</span></span><br><span class="line"></span><br><span class="line">    Application.ScreenUpdating = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">For</span> <span class="keyword">Each</span> Cur_Paragraph <span class="keyword">In</span> ActiveDocument.Paragraphs</span><br><span class="line">	<span class="comment">'上面三行不要修改</span></span><br><span class="line">        Cur_Paragraph.LineSpacing = ParagraphSpace(Int(VBA.Rnd * <span class="number">5</span>) + <span class="number">1</span>)</span><br><span class="line">	<span class="comment">'上面一行对每个行间距微调,不想要可删除</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">Next</span></span><br><span class="line">        Application.ScreenUpdating = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>修改后如图, 记得要把代码16-19行换成你自己的手写体</p>
<p><img src="https://my-pic-bed-1302358960.cos.ap-nanjing.myqcloud.com/Blog/202006/img/QQ%E6%88%AA%E5%9B%BE20200606154923.jpg" alt="代码修改如下"></p>
<p>点击上面的运行按钮(或者是个小绿三角) 等待</p>
<p>不出意外结果如下</p>
<p><img src="https://my-pic-bed-1302358960.cos.ap-nanjing.myqcloud.com/Blog/202006/img/2020%E5%B9%B46%E6%9C%886%E6%97%A515%E7%82%B951%E5%88%86.jpg" alt="记得要把字体换成自己的手写体哦"></p>
<p>记得把字体换成不同但相近的手写体, 别想现在一样丑不拉几的</p>
<h3 id="Step3-设置页面与段落"><a href="#Step3-设置页面与段落" class="headerlink" title="Step3. 设置页面与段落"></a>Step3. 设置页面与段落</h3><p>准备好打印机, 复印纸, 以及浪费很多纸张的决心, 开始下一步.</p>
<p><del>当然你要实现准备好电子笔记, 你不会真的没有记吧?<del/></p>
<h4 id="字体字号"><a href="#字体字号" class="headerlink" title="字体字号"></a>字体字号</h4><p>在上一步我们应该是基本解决了这个问题, 如果没有, 若纸张线条间距为8mm, 字号设置为16左右比较合适.</p>
<p>word 中字号的单位是磅, 约为0.3528毫米.也就是说16的字号打印出来大约是5.645毫米高.</p>
<p>此外可以试一下全部用 <strong>粗体</strong> , 因为我用的字体比较纤细, 看着太假</p>
<p>多试试, 不要怕废纸</p>
<h4 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h4><p>全选, 右键段落, 设置行间距与段间距.</p>
<p>间距一栏下</p>
<p><strong>段前段后:</strong>全部设置成0 空白也要再设置一次</p>
<p><strong>行距:</strong> 选择固定值, 这里单位依旧是磅数, 如果直线相隔8mm的话大约设置成23磅(23*0.35=8.1144‬)</p>
<h4 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h4><p>word主页面 - 布局 - 页边距&amp;纸张大小</p>
<p>自己量一量吧, 上边距是到第一行的<strong>字的上沿</strong>, 下边距是最后一行<strong>字的下沿</strong></p>
<p>多试试, 不要怕废纸</p>
<p><img src="https://my-pic-bed-1302358960.cos.ap-nanjing.myqcloud.com/Blog/202006/img/K%607_8GUVFXF0%24PQU81VDCUK.jpg" alt="这么多全是浪费掉的"></p>
<h3 id="Step4-其他作假手段"><a href="#Step4-其他作假手段" class="headerlink" title="Step4. 其他作假手段"></a>Step4. 其他作假手段</h3><ol>
<li><p>全部用粗体, 生成的字体过于纤细</p>
</li>
<li><p>切换字体确实有效,但是字体风格不能相差太大</p>
</li>
<li><p>扫描后对PDF做一下黑白处理, 更难发现</p>
<p>另外推荐使用app Scanbot扫描, 吊打某某扫描王</p>
</li>
<li><p>通过<a href="https://www.ilovepdf.com/compress_pdf" target="_blank" rel="noopener">这个网址</a>对PDF进行全损压缩, 直接挑压缩率最高的那个选项(斜眼笑)</p>
</li>
</ol>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>成品还是很满意滴~ </p>
<p>线上检查的话应该足够以假乱真了吧👌</p>
<p><img src="https://my-pic-bed-1302358960.cos.ap-nanjing.myqcloud.com/Blog/202006/img/QQ%E6%88%AA%E5%9B%BE20200606161805.jpg" alt="效果图1"></p>
<p><img src="https://my-pic-bed-1302358960.cos.ap-nanjing.myqcloud.com/Blog/202006/img/QQ%E6%88%AA%E5%9B%BE20200606161822.jpg" alt="效果图2"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>听说Github上<a href="https://link.zhihu.com/?target=https%3A//github.com/Gsllchb/Handright">这个项目</a>可以进一步微调字体效果,实现同字不同样</p>
</li>
<li><p>使用喷墨式打印机应该会稍微好一些</p>
</li>
<li><p>学到了磅数这一没什么卵用的知识</p>
</li>
<li><p>为了本篇传图开了腾讯云的COS, 终于有图床了</p>
</li>
<li><p>其实笔记最好还是自己平时带着记比较好</p>
<p><del>但是这当然是不可能的啊哈哈哈哈<del/></p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术小记</category>
        <category>快乐摸鱼</category>
      </categories>
      <tags>
        <tag>手写体</tag>
        <tag>word 宏命令</tag>
        <tag>摸鱼</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统之进程线程</title>
    <url>/2020/06/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%B9%8B%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p>本章节包括五个小节</p>
<ol>
<li>进程 (Processes)</li>
<li>线程 (Threads)</li>
<li>调度 (Scheduling)</li>
<li>进程间通信 (InterProess Communicatiin,IPC)</li>
<li>经典的IPC问题</li>
</ol>
<a id="more"></a>

<h2 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h2><p>在本小节会涉及到：</p>
<ol>
<li>CPU是如何工作的，并由此引入进程的概念与用途</li>
<li>进程的生命周期：<ol>
<li>⭐进程的五种状态及之间的转换</li>
<li>进程的创建</li>
<li>进程的中止</li>
<li>两个进程的切换（上下文保存）</li>
</ol>
</li>
<li>⭐Process Control Blocks,PCB (进程表, 进程控制块)<ol>
<li>为什么要用PCB？</li>
<li>PCB 中包括什么？</li>
</ol>
</li>
</ol>
<h3 id="1-1-进程的引入及概念"><a href="#1-1-进程的引入及概念" class="headerlink" title="1.1 进程的引入及概念"></a>1.1 进程的引入及概念</h3><p>本章的内容(包括进程线程调度IPC)在于探讨如何更高效地利用CPU. 尽管市面上早已采用了多核架构, 但下述分析均为单核CPU, 如果要考虑多核的情况会事先说明。</p>
<p>既然是单核CPU，那么在同一时间刻CPU计算资源只能用在一个地方。如果我此时一边敲代码，一边听歌，一边挂QQ，那么实际上CPU的运行状态是在这些工作之间以毫秒级别的速度来回迅速切换，在宏观上造成几个工作同时进行的假象。也即是<strong>“微观串行，宏观并行”</strong>。<br>这样的情况我们被称为<strong>多道程序</strong> ，即同时有多个程序在执行中(宏观)，但实际上只有一个进程在使用CPU(微观)<br><img src="https://i.loli.net/2020/06/02/iXhVgOqNfb48E5M.png" alt="微观串行，宏观并行"><br><strong>进程：</strong> an executing program, including the current values of the program counter, register, and variables.<br>进程是进行中的程序。编写好的代码(.c, .py)或可运行的文件(.exe, .bat) 被成为程序。当他们被运行时才被称为进程。<br>一个进程包括：</p>
<ul>
<li>program counter, 程序计数器;用于标志该进程当前运行至程序的何处</li>
<li>stack, 栈; </li>
<li>data section,数据部分</li>
</ul>
<p>那么显然，多道程序中每个程序都拥有自己的PC、stack…</p>
<h3 id="1-2-进程的生命周期"><a href="#1-2-进程的生命周期" class="headerlink" title="1.2 进程的生命周期"></a>1.2 进程的生命周期</h3><h4 id="1-2-1-进程的状态与转换"><a href="#1-2-1-进程的状态与转换" class="headerlink" title="1.2.1 进程的状态与转换"></a>1.2.1 进程的状态与转换</h4><h5 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h5><p>进程是一个动态的客体，可以被创建销毁等。进程总共拥有五种生命状态(state)：</p>
<ol>
<li>new               创建</li>
<li>ready             就绪</li>
<li>running           运行</li>
<li>waiting/blocked   阻塞/等待态</li>
<li>terminated/exit        销毁</li>
</ol>
<h5 id="状态之间转换"><a href="#状态之间转换" class="headerlink" title="状态之间转换"></a>状态之间转换</h5><ul>
<li>new -&gt; ready</li>
<li>ready -&gt; running</li>
<li>running -&gt; ready</li>
<li>running -&gt; blocked</li>
<li>running -&gt; exit</li>
<li>blocked -&gt; ready</li>
</ul>
<p>待配图: 状态转换</p>
<h4 id="1-2-2-进程的创建"><a href="#1-2-2-进程的创建" class="headerlink" title="1.2.2 进程的创建"></a>1.2.2 进程的创建</h4><h5 id="进程的创建场景"><a href="#进程的创建场景" class="headerlink" title="进程的创建场景:"></a>进程的创建场景:</h5><ol>
<li>系统初始化</li>
<li>系统调用</li>
<li>用户命令</li>
<li>批处理作业的初始化</li>
</ol>
<h5 id="父子进程"><a href="#父子进程" class="headerlink" title="父子进程"></a>父子进程</h5><ul>
<li>父进程不断创建子进程,由此形成进程树</li>
<li>子进程<strong>可以</strong>继承父的资源(也可以不继承或半继承)</li>
<li>父子进程可以同时执行,也有可能父等待子</li>
<li>Unix 中存在这种进程的层级关系,Win 中进程的地位平等,不存在父子关系<ul>
<li>但是这一说法似乎不当, <a href="https://www.zhihu.com/question/31429459" target="_blank" rel="noopener">参看此处</a></li>
</ul>
</li>
</ul>
<p>[待配图] Unix进程树</p>
<h4 id="1-2-3-进程的销毁"><a href="#1-2-3-进程的销毁" class="headerlink" title="1.2.3 进程的销毁"></a>1.2.3 进程的销毁</h4><h5 id="进程销毁的场景"><a href="#进程销毁的场景" class="headerlink" title="进程销毁的场景"></a>进程销毁的场景</h5><ol>
<li><p>Normal exit    正常退出 (自愿)</p>
</li>
<li><p>Error exit        错误退出 (自愿)</p>
</li>
<li><p>Fatal error      致命性错误退出 (非自愿)</p>
<p>eg: 除0, 取非法地址</p>
</li>
<li><p>被其他进程杀死  (非自愿)</p>
<p>eg: 父进程, 系统, 其他优先级更高的进程</p>
</li>
</ol>
<h5 id="级联终止"><a href="#级联终止" class="headerlink" title="级联终止"></a>级联终止</h5><p>​    当父进程退出时,子进程必须退出.</p>
<h4 id="1-2-4-进程的切换"><a href="#1-2-4-进程的切换" class="headerlink" title="1.2.4 进程的切换"></a>1.2.4 进程的切换</h4><ul>
<li>进程的切换非常频繁, 一般在毫秒级</li>
<li>进程切换需要耗费时间, 称为Gap</li>
</ul>
<h5 id="进程切换的场景"><a href="#进程切换的场景" class="headerlink" title="进程切换的场景"></a>进程切换的场景</h5><ol>
<li><p>时钟中断</p>
<p>eg 时间轮片用尽</p>
</li>
<li><p>IO 中断</p>
</li>
<li><p>Memory Fault  内存失效</p>
<p>eg 内存中页面失效</p>
</li>
<li><p>Trap 陷入</p>
<p>发生错误时</p>
</li>
<li><p>Supervisor Call</p>
<p>管理程序调用</p>
</li>
</ol>
<h5 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h5><p>切出时, 必须保存该进程目前的环境.切入时,必须加载先前的环境</p>
<p>使用 PCB(Processing Control Block, 进程表,进程控制块) 来储存进程的环境</p>
<h5 id="进程调度队列"><a href="#进程调度队列" class="headerlink" title="进程调度队列"></a>进程调度队列</h5><p>这一块没听 似乎是调度队列包括以下三种</p>
<ol>
<li>Job queue 系统中所有进程的队列</li>
<li>Ready queue 主存中所有进程的队列, 拿到CPU就跑的那种</li>
<li>Device queues 等待IO设备的进程队列</li>
</ol>
<h5 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a><strong>PCB</strong></h5><p>包括:</p>
<ol>
<li>进程管理数据<ul>
<li>寄存器</li>
<li>PC</li>
<li>状态字 PSW </li>
<li>进程状态</li>
<li>优先级</li>
<li>调度算法参数</li>
<li>进程ID</li>
<li>父进程ID</li>
<li>组进程ID</li>
<li>信号量</li>
<li>进程开始时间</li>
<li>进程已用时间</li>
<li>子进程已用时间</li>
<li>……</li>
</ul>
</li>
<li>内存管理数据<ul>
<li>指向本进程代码段指针</li>
<li>指向本进程数据段指针</li>
<li>指向本进程堆栈段指针</li>
</ul>
</li>
<li>文件管理数据<ul>
<li>根目录</li>
<li>工作目录</li>
<li>文件描述符</li>
<li>……</li>
</ul>
</li>
</ol>
<p>以上全部不用记🐶 下面的要记住(精简版)</p>
<blockquote>
<ol>
<li>Process state                 进程状态 </li>
<li>Program counter 程序计数器 </li>
<li>CPU registers CPU寄存器</li>
<li>CPU scheduling information CPU调度信息</li>
<li>Memory-management information  内存管理信息 </li>
<li>Accounting information 计账信息</li>
<li>I/O status information I/O状态信息</li>
</ol>
</blockquote>
<h2 id="Threads"><a href="#Threads" class="headerlink" title="Threads"></a>Threads</h2><p>在本小节会涉及到：</p>
<ol>
<li>了解进程切换中的缺陷（时空开销过大），并由此引入线程的概念及用途</li>
<li>了解线程资源的私有与共享（有助于解决上一点的缺陷）, 并认识线程的优势</li>
<li>几种线程的实现方式及区别<ol>
<li>Kernel-level Thread   (内核级线程)</li>
<li>User-level Thread     (用户级线程)</li>
<li>Hybrid Thread         (混合式线程)</li>
<li>Pop-up Thread         (弹出式线程)</li>
</ol>
</li>
</ol>
<h3 id="2-1-线程的引入及概念"><a href="#2-1-线程的引入及概念" class="headerlink" title="2.1 线程的引入及概念"></a>2.1 线程的引入及概念</h3><p>你看进程之间切换是不是要保存好多东西,时空开销过大. 线程是轻量级的进程, 它拥有的环境没有进程那么多, 所以线程间的切换更加轻便.</p>
<ul>
<li>进程是为了避免等待IO的时间, 线程是为了缩短进程切换中的浪费的时间</li>
<li>线程是隶属于某一进程, 或者说<em>( traditional or heavyweight )</em>进程是仅有一个线程的进程</li>
<li>但是线程还是有必要的环境的</li>
<li>同一个进程的不同线程(兄弟线程)可以共享一部分资源</li>
</ul>
<p>待配图 进程与线程</p>
<h3 id="2-2-进程资源的私有与共享"><a href="#2-2-进程资源的私有与共享" class="headerlink" title="2.2 进程资源的私有与共享"></a>2.2 进程资源的私有与共享</h3><p>对于同一个进程的不同线程(兄弟线程)来说:</p>
<h5 id="共享的items"><a href="#共享的items" class="headerlink" title="共享的items"></a>共享的items</h5><ol>
<li>地址空间</li>
<li>全局变量</li>
<li>文件流</li>
<li>子进程</li>
<li>Pending alarm (这是什么?)</li>
<li>信号量</li>
<li>记账信息( Accounting information)</li>
</ol>
<h5 id="私有的items"><a href="#私有的items" class="headerlink" title="私有的items"></a>私有的items</h5><ul>
<li>PC</li>
<li>寄存器(集)</li>
<li>堆栈空间</li>
<li>线程状态</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TODO：第二节：进程</span><br></pre></td></tr></table></figure>

<h2 id="Scheduling"><a href="#Scheduling" class="headerlink" title="Scheduling"></a>Scheduling</h2><p>在本小节会涉及到：</p>
<ol>
<li>调度的概念<ol>
<li>CPU密集型与IO密集型作业</li>
<li>调度的目的</li>
<li>什么时候需要调度？</li>
<li>调度算法的目标（不同OS下目标有差异）</li>
</ol>
</li>
<li>不同系统下常见的调度算法<ol>
<li>批处理系统 (Batch SystemSs)<ol>
<li>First-come first-served        (FCFS,先来先服务)</li>
<li>Shortest job first             (SJF,短作业优先)</li>
<li>Shortest remaining time first (SRTF,最短剩余时间优先)</li>
</ol>
</li>
<li>交互式系统 (Interactive Systems)<ol>
<li>Round Robin                    (RR,时间片轮转)</li>
<li>Priority<ol>
<li>Statically Priority         (静态优先级)</li>
<li>Dynamically Priority        (动态优先级)</li>
</ol>
</li>
<li>Shortest Process Next          (SPN, 最短进程优先)</li>
<li>Others</li>
</ol>
</li>
<li>实时操作系统 (Real-Time Systems)<ol>
<li>可调度性</li>
</ol>
</li>
<li>关于线程调度的一些补充</li>
</ol>
</li>
</ol>
<p>需要说明的是，虽然进程调度与线程调度是两种东西，但算法的核心思想是一致的，这里不过分区分。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TODO：第三节：调度</span><br></pre></td></tr></table></figure>

<h2 id="IPC"><a href="#IPC" class="headerlink" title="IPC"></a>IPC</h2><p>在本小节会涉及到：</p>
<ol>
<li>什么是临界区资源<ol>
<li>竞争</li>
<li>保证临界区互斥的4个条件</li>
</ol>
</li>
<li>互斥的策略1 (Busy Waiting)<ol>
<li>禁止中断</li>
<li>锁变量</li>
<li>严格轮换法</li>
<li>⭐Peterson 算法</li>
<li>TSL 指令</li>
</ol>
</li>
<li>互斥的策略2<ol>
<li>上述策略的缺陷（忙等待 优先级反向）</li>
<li>Sleep &amp; Wakeup<ol>
<li>问题：唤醒丢失</li>
</ol>
</li>
<li>⭐信号量 Semaphore<ol>
<li>互斥信号量 Mutexe</li>
<li>PV操作</li>
</ol>
</li>
<li>管程 Monitor</li>
<li>消息传递</li>
<li>屏障</li>
</ol>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TODO：第四节：IPC</span><br></pre></td></tr></table></figure>

<h2 id="Classical-IPC-Problems"><a href="#Classical-IPC-Problems" class="headerlink" title="Classical IPC Problems"></a>Classical IPC Problems</h2><p>本小节将涉及到几个常见IPC模型：</p>
<ol>
<li>生产者与消费者</li>
<li>读者与写者</li>
<li>进餐的哲学家</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>专业课</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello_Hexo_Blog</title>
    <url>/2020/05/31/Hello-Hexo-Blog/</url>
    <content><![CDATA[<p> 第一篇博客~ 开心</p>
<a id="more"></a>

<h3 id="简单记录一下搭建过程"><a href="#简单记录一下搭建过程" class="headerlink" title="简单记录一下搭建过程"></a>简单记录一下搭建过程</h3><p>博客基于<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo框架</a> + Github，域名当然是阿里云了 （6元一年他不香吗hhh）</p>
<p>感谢舍友 <a href="https://www.117503445.top/" target="_blank" rel="noopener">@117503445</a> 指名了博客搭建的主要方向，搭建过程中主要参考了知乎用户 @吴润 的<a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">这篇文章</a>，基本很顺畅地搭建起来了，一并致谢。</p>
<ol>
<li>安装并配置Node.js</li>
<li>安装 Hexo 框架</li>
<li>关联 Github 仓库</li>
<li>申请域名并绑定</li>
<li>发布第一篇博客</li>
</ol>
<h3 id="ToDo"><a href="#ToDo" class="headerlink" title="ToDo"></a>ToDo</h3><p>现在只是把房子搭起来还没有装修啥啊，让俺接着去学一学~</p>
<p>[x] 更换 Hexo 主题</p>
<p>[x] 熟悉博客的发布修改标签等功能</p>
<p>[ ] 建立图床</p>
<p>[ ] 增加其他的小插件 ~~</p>
<h3 id="分类设置"><a href="#分类设置" class="headerlink" title="分类设置"></a>分类设置</h3><ul>
<li>学习笔记    | 系统性的学习<ul>
<li>专业课<ul>
<li>操作系统</li>
</ul>
</li>
</ul>
</li>
<li>技术小记    | 碎片化知识</li>
<li>生活随笔<ul>
<li>山与水    | 游记</li>
<li>书与影    | 书评影评</li>
<li>时与光    | 定期总结</li>
</ul>
</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>技术小记</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
